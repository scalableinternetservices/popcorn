# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey(surveyId: Int!): Survey

  #adding new queries
  movies: [Movie!]!
  votes(roomId: Int!): [Vote]
  rooms: [Room!]!
  room(room_id: Int!): Room
  movie(movieId: Int!): Movie
  movieByGenre(genres: MovieByGenreInput!): [Movie!]!
  movieUser(uid: Int!): MovieUser
  movieInRoom(room_id: Int!, index: Int!): Movie
  movieUsers: [MovieUser!]!
  roomMovieCollection(room_id: Int!): [RoomMovieCollection]
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey(input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion(surveyId: Int!): Survey

  nextMovie(input: NextMovieInput!): Int!

  addRoomAndMovieUser(input: RoomAndMovieUserInput!): Boolean!
  addVote(input: VoteInput!): Boolean!
  addMovieToRoom(input: MovieToRoomInput!): Boolean!
  addMovieUser(input: MovieUserInput!): Boolean!
}

type Subscription {
  surveyUpdates(surveyId: Int!): Survey
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
}

input MovieUserInput {
  room_id: Int!
  name: String!
}

enum UserType {
  ADMIN
  USER
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

input RoomAndMovieUserInput {
  room_id: Int!
  genre1: String!
  genre2: String!
  name: String!
}

input MovieToRoomInput {
  room_id: Int!
  movie_id: Int!
  index: Int!
}

input NextMovieInput {
  room_id: Int!
  index: Int!
}

input MovieByGenreInput {
  genre1: String!
  genre2: String!
}

input VoteInput {
  room_id: Int!
  movie_id: Int!
  user_id: Int!
}

#new schema
type Movie {
  movie_id: Int!
  title: String!
  time: Int!
  year: Int!
  genre: String!
  director: String!
  actors: String!
  country: String!
  rating: Float!
  netflix: String!
  enter_in: String!
  image: String!
  description: String!
}

type MovieUser {
  room_id: Int!
  u_id: Int!
  name: String!
}

type Room {
  room_id: Int!
  admin_user_id: Int!
  genre1: String!
  genre2: String!
}

type RoomMovieCollection {
  id: Int!
  room_id: Int!
  movie_id: Int!
  movie_index: Int!
}

type Vote {
  id: Int!
  room_id: Int!
  movie_id: Int!
  user_id: Int!
}

type Genres {
  movie_id: Int!
  action_and_adventure: Boolean!
  anime_features: Boolean!
  children_family_movies: Boolean!
  classic_movies: Boolean!
  comedies: Boolean!
  cult_movies: Boolean!
  documentaries: Boolean!
  dramas: Boolean!
  faith_and_Spirituality: Boolean!
  horror_movies: Boolean!
  independent_movies: Boolean!
  international_movies: Boolean!
  lgbtq_movies: Boolean!
  movies: Boolean!
  music_and_musicals: Boolean!
  romantic_movies: Boolean!
  scifi_and_fantasy: Boolean!
  sports_movies: Boolean!
  standup_comedy: Boolean!
  thrillers: Boolean!
}
